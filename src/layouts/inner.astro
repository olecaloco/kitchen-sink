---
import { BackButton } from "../components";
import Navigation from "../components/navigation.astro";

const { title, navItems } = Astro.props;

const hasNavItems = navItems && navItems.length > 0 ? true : false;
const contentGridClass = hasNavItems ? "col-span-9" : "col-span-12";
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>{title ?? "Tailwind Kitchen Sink"}</title>

        <link rel="stylesheet" href="/kitchen-sink/assets/style.css" />
    </head>
    <body>
        <div class="container mx-auto w-full mt-10 px-4">
            <div class="md:sticky md:top-4 mb-10">
                <BackButton />
            </div>

            <div class="block md:grid md:grid-cols-12 md:gap-2">
                {navItems && <Navigation items={navItems} />}
                <div class={contentGridClass}>
                    <slot />
                </div>
            </div>
        </div>
    </body>

    <script>
        import { codeToHtml } from "shiki";

        const codeGroups = document.querySelectorAll(".code-group");

        codeGroups.forEach(async (group) => {
            const codeBlock = group.querySelector(".code-block");
            const codeOutput = group.querySelector(".code-output");
            const content = codeBlock.innerHTML;

            const splittedLines = content.split("\n");
            const dirtyLines = splittedLines.filter((line) => {
                if (!line.replace(/\s/g, "").length) return false;
                return true;
            });

            let initialCount = 0;
            const lines = dirtyLines.map((line, index) => {
                let count = 0;
                let html = "";

                for (let char of line) {
                    if (char === " ") count++;
                    else break;
                }

                if (index === 0) {
                    initialCount = count;
                }

                for (let i = 0; i < count - initialCount; i++) {
                    html += " ";
                }

                html += line.trim();

                return html;
            });

            const cleanedHTML = lines.join("\n");
            const code = await codeToHtml(cleanedHTML, { theme: "one-dark-pro", lang: "html" });
            codeOutput.innerHTML = code;
        });
    </script>
</html>
